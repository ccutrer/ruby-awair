#!/usr/bin/env ruby
# frozen_string_literal: true

require "faraday_middleware"
require "mqtt-homeassistant"
require "optparse"

refresh = 30.0

options = OptionParser.new do |opts|
  opts.banner = "Usage: awair_mqtt_bridge SENSOR_IP MQTT_URI [options]"

  opts.on("--refresh-interval=INTERVAL", "Refresh interval (default 30s)") { |v| refresh = v.to_f }
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

options.parse!

unless ARGV.length == 2
  puts options
  exit 1
end

awair = Faraday.new(url: "http://#{ARGV[0]}/air-data/latest") do |f|
  f.request :retry
  f.response :raise_error
  f.response :json
  f.adapter :net_http_persistent
end

config = awair.get("/settings/config/data").body
data = awair.get.body

homie = MQTT::Homie::Device.new(MQTT::Homie.escape_id(config["device_uuid"]), "Awair Air Quality Sensor", mqtt: ARGV[1])
homie.home_assistant_device = {
  manufacturer: "Awair Inc.",
  sw_version: config["fw_version"]
}
device = homie.node("device", "Awair Air Quality Sensor", "Device")
device.property("score",
                "Air Quality Score",
                :integer,
                data["score"],
                format: 0..100,
                unit: "%",
                hass: { sensor: { icon: "mdi:counter",
                                  state_class: :measurement } })
device.property("dewpoint",
                "Dew Point",
                :float,
                data["dew_point"],
                unit: "°C",
                hass: { sensor: { device_class: :temperature,
                                  icon: "mdi:water-opacity",
                                  state_class: :measurement } })
device.property("temperature",
                "Current Temperature",
                :float,
                data["temp"],
                unit: "°C",
                hass: { sensor: { device_class: :temperature,
                                  state_class: :measurement } })
device.property("relative-humidity",
                "Current Relative Humidity",
                :float, data["humid"],
                format: 0..100,
                unit: "%",
                hass: { sensor: { device_class: :humidity,
                                  state_class: :measurement } })
device.property("co2",
                "CO₂ Concentration",
                :integer, data["co2"],
                unit: "ppm",
                hass: { sensor: { device_class: :carbon_dioxide,
                                  state_class: :measurement } })
device.property("tvocs",
                "TVOCs Concentration",
                :integer,
                data["voc"],
                unit: "ppb",
                hass: { sensor: { device_class: :volatile_organic_compounds,
                                  state_class: :measurement } })
device.property("pm2-5",
                "Fine particle concentration",
                :integer,
                data["pm25"],
                unit: "µg/m³",
                hass: { sensor: { device_class: :pm25,
                                  state_class: :measurement } })

homie.publish

loop do
  data = awair.get.body
  device["score"].value = data["score"]
  device["dewpoint"].value = data["dew_point"]
  device["temperature"].value = data["temp"]
  device["relative-humidity"].value = data["humid"]
  device["co2"].value = data["co2"]
  device["tvocs"].value = data["voc"]
  device["pm2-5"].value = data["pm25"]

  sleep refresh
end
